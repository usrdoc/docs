                          Some notes on POSIX threads

POSIX threads data types

/-----------------------------------------------------------------------------\
| Type                     |      Description                                 |
|-----------------------------------------------------------------------------|
| pthread_t                |      Thread identifier                           |
| pthread_mutex_t          |      Mutex                                       |
| pthread_cond_t           |      Condition variable                          |
| pthread_key_t            |      "access key" for thread-specific data       |
| pthread_attr_t           |      Thread attributes object                    |
| pthread_mutexattr_t      |      Mutex attribute object                      |
| pthread_condattr_t       |      Condition variable attribute object         |
| pthread_once_t           |      "one time initialization" control context   |
\-----------------------------------------------------------------------------/


* Threads are all about concurrency, synchronization, and scheduling.

* Two types of thread initialization
    - Statically -- pthread_mutex_t lock = PTHREAD_MUTEX_INITIALIZER;
    - dynamically -- pthread_mutex_init(3)

* Mutexes just serialize (pthread_mutex_t)
  - Pthreads model uses mutex for protection
* Waiting problem is solved by condition variables (pthread_cond_t -- Wait and
                                                    signal)
  - Condition variables are for communication.

* On "thread-safe" (also called reentrant)
  - Routines with no restrictions on how the threads should be used.

* On Types and interfaces
  - All pthread types are opaque.
  - There is no public definition of these types' representation, and no
    assumption should be made about the representation.
  - Use them only in the manner specifically described by the standard.
  - For example: A thread identifier, for example, may be an integer, or a
    pointer, or a structure...


* Are two pthread_t types equal before initializing?

* A typical thread function:
  void * funcname(void *);

* Just like processes, are there zombie threads?
  Yes. Threads that have terminated but are not detached retain VM, stack, and
  other resources. They are zombies in truer sense than the processes.

* When to detach a thread?
  If we do not wish to know the return status or control it, better to detach a
  thread.
  A thread can detach itself and also it can detach any other thread whose ID it
  can get hold of.

* On pthread_join
  When to call pthread_join()? Or is it necessary at all?
  - If you have to know the return status of a thread or its completion status,
    then pthread_join is called, the pthread_join() blocks the caller until the
    thread is done. [How to get out of pthread_join()?]
    Calling pthread_join detaches the specified thread automatically.

******
* Just calling pthread_create is not enough, one has to "wait" for it.
  ELSE
        When main returns all the threads exit (even before completion), iow
        returning from main() causes all the threads to exit. See example
        programs in ch2/. We can avoid this by causing the main thread to exit
        by calling pthread_exit().

        If main doesn't call pthread_join() to wait for the thread to complete
        it has to do something else and should not die before the threads are
        done. Something else? For example using the condition variables.

        See ch2/ directory for examples.
******

Five variations of lifecycle of thread with blocking to ponder about.
   1. Call pthread_create, pthread_join and be done with it.
   2. Sleep for 10 seconds in thread, do not call pt_join, pt_exit in main(). In
      other words "do not wait for the thread".
   3. Block: Sleep for 10 seconds in thread, call pt_join in main.
   4. Block: Sleep for 10 seconds in thread, call pt_exit in main.
   4. No Block: Sleep for 10 seconds in child, but do not block in main, just
      carry on. The thread never completes.
   5. Ugly Block: Sleep for 10 seconds in thread, sleep for 15 seconds in
      main. So, the thread wakes up first, and completes before main. Just by
      the virtue of it.

Different States of a thread
------------------------------
Ready, Running, Blocked, Terminated

Terminated
----------
* A terminated thread is not recycled, it stays in that state holding up the
  resources till it is "detached" or "joined".
* A thread reaches the terminated state upon pthread_exit() or upon return.
* Upon termination all data are considered obsolete.

Creation
--------
* "Initial" thread is created by the system upon the start of the process.
* Additional threads are created by the programmer by calling pthread_create().

** pthread_join() is a convenience, not a rule.

                                Synchronization
                                ---------------

* Invariants, Critical Sections, and Predicates

Invariants: Assumptions made by a program
            (relationships between sets of variables)

Critical Sections: We can just call them "serial regions".

Predicates: Logical expressions that describe the state of invariants needed by
            code. For eg: "Queue is empty", "Resources available".

* Mutexes:
          Mutexes are for synchronization, they help serialize code.

 /-------------------------------------------------------\
 | Creating and destroying a mutex:                      |
 |       * pthread_mutex_t = PTHREAD_MUTEX_INITIALIZER   |
 |       * pthread_mutex_init()                          |
 |       * pthread_mutex_destroy()                       |
 \-------------------------------------------------------/

 ** Never copy a mutex **

 /------------------------------------\
 | Locking and unlocking a mutex:     |
 |       * pthread_mutex_lock()       |
 |       * pthread_mutex_trylock()    |
 |       * pthread_mutex_unlock()     |
 \------------------------------------/

Blocking vs non-blocking locks
------------------------------
When pthread_mutex_lock is called, the calling thread is blocked if another
thread has locked the mutex. And stays this way till the mutex is
unlocked. Sometimes this is not desirable, in such cases use *trylock.

Common solutions for a deadlock
-------------------------------
a. Fixed locking with a locking hierarchy
      If there are two mutexes mutex_a and mutex_b, always lock with a fixed
      order. i.e
       i.  Lock with mutex_a
       ii. Lock with mutex_b

b. Try and backoff
       Lock the first mutex, mutex_a. Then try to lock the second mutex, mutex_b
       with trylock(), if it fails unlock mutex_a.

Try and backoff is inefficient but helps.


CONDITION VARIABLES
-------------------
Defn: Condition variables are used for communicating information about the state
      of shared data.

Consider an example:
    Suppose the operation of a thread thread_a is to manipulate a queue. If the
    queue is empty the thread_a has nothing to do but unlock the mutex and go on
    "waiting"/"being blocked" till the queue has some data, possibly populated
    by another thread thread_b. The thread_b fills up the queue and wakes up the
    blocked thread, thread_a.
        Thus the thread thread_a does two things:
                 a. unlock the mutex
                 b. block itself (so that another thread can find its id and
                                  wake it up)

    If thread_b happens to lock the queue before thread_a blocks itself,
    thread_b doesn't even know that thread_a is waiting and thus: thread_a might
    go on blocking forever.
    Thus step (a) and (b) must be atomic. If not, the window between steps (a)
    and (b) can be a breeding ground for race conditions.

A "condition variable wait" always returns with the mutex locked.

A condition variable is a "signalling mechanism" associated with a mutex and by
extension is also associated with the shared data proteced by the mutex.

"WAITING" on a condition variable atomically releases the associated mutex and
          waits until another thread signals or broadcasts the condition
          variable.

"Condition variables are for signalling, not for mutual exclusion".


           Creating and destroying a condition variable
           --------------------------------------------

        /-------------------------------------------------\
        |  pthread_cond_t cond = PTHREAD_COND_INITIALIZER |
        |  pthread_cond_init(...);                        |
        |  pthread_cond_destroy(...);                     |
        \-------------------------------------------------/


Waiting on a condition variable
--------------------------------

        /-----------------------------\
        | pthread_cond_wait()         |
        | pthread_cond_timedwait()    |
        \-----------------------------/


* A condition variable must be associated with a mutex and with a predicate
  condtion.
* When a thread waits on a condition variable it must always have the associated
  mutex locked.
* pthread_cond_wait()
    - unlock the mutex
       > block the thread
    - relock the mutex
   <- return from pthread_cond_wait()

                           Waking condition variables
                           --------------------------
              /---------------------------\
              |  pthread_cond_signal()    |
              |  pthread_cond_broadcast() |
              \---------------------------/

